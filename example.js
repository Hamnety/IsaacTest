// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Isaac Save Editor
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä

const fs = require('fs');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ import)
// const { IsaacBinaryParser } = require('./dist/parser/isaacBinaryParser');
// const { IsaacSaveEditor } = require('./dist/editor/saveEditor');

console.log('Isaac Save Editor - –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
console.log('==========================================');

// –ü—Ä–∏–º–µ—Ä 1: –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
function readSaveFile(filePath) {
    try {
        console.log(`\n–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${filePath}`);
        
        if (!fs.existsSync(filePath)) {
            console.log('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return null;
        }

        const fileBuffer = fs.readFileSync(filePath);
        console.log(`‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω (${fileBuffer.length} –±–∞–π—Ç)`);
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ:
        // const parser = new IsaacBinaryParser(fileBuffer);
        // const saveData = parser.parse();
        // return saveData;
        
        console.log('üìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è):');
        console.log('- –ò–º—è –∏–≥—Ä–æ–∫–∞: TestPlayer');
        console.log('- –ú–æ–Ω–µ—Ç—ã: 99');
        console.log('- –ë–æ–º–±—ã: 5');
        console.log('- –ö–ª—é—á–∏: 3');
        console.log('- –ü–æ–±–µ–¥: 15');
        console.log('- –°–º–µ—Ä—Ç–µ–π: 42');
        
        return {
            playerName: 'TestPlayer',
            coins: 99,
            bombs: 5,
            keys: 3,
            stats: {
                wins: 15,
                deaths: 42
            }
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error.message);
        return null;
    }
}

// –ü—Ä–∏–º–µ—Ä 2: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
function editSaveData(saveData) {
    if (!saveData) {
        console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
    }

    console.log('\nüîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:');
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ:
    // const editor = new IsaacSaveEditor(saveData);
    // editor.setCoins(999);
    // editor.setBombs(99);
    // editor.setKeys(99);
    // editor.unlockCharacter(1); // Magdalene
    // editor.unlockAchievement(1);
    
    console.log('‚úÖ –ú–æ–Ω–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: 999');
    console.log('‚úÖ –ë–æ–º–±—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: 99');
    console.log('‚úÖ –ö–ª—é—á–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: 99');
    console.log('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ Magdalene —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
    console.log('‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ #1 —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
}

// –ü—Ä–∏–º–µ—Ä 3: –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
function exportToJSON(saveData) {
    if (!saveData) {
        console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        return;
    }

    console.log('\nüì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON:');
    
    const jsonData = JSON.stringify(saveData, null, 2);
    const outputPath = 'save_data_export.json';
    
    try {
        fs.writeFileSync(outputPath, jsonData);
        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: ${outputPath}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
function runExample() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞...\n');
    
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å)
    const saveFilePath = 'C:\\Users\\[–í–∞—à–µ –∏–º—è]\\Documents\\My Games\\Binding of Isaac Rebirth\\persistentgamedata1.dat';
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const saveData = readSaveFile(saveFilePath);
    
    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    editSaveData(saveData);
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
    exportToJSON(saveData);
    
    console.log('\n‚ú® –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('\n–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm start');
    console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000');
    console.log('3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä
runExample();
